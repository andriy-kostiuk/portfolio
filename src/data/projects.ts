import { Project } from '@/types';

export const projects: Project[] = [
  {
    id: 'portfolio',
    title: 'Andrii Kostiuk - Portfolio',
    subtitle: 'Personal Portfolio Built with Next.js',
    images: [
      '/img/projects/portfolio/portfolio-1.webp',
      '/img/projects/portfolio/portfolio-2.webp',
      '/img/projects/portfolio/portfolio-3.webp',
      '/img/projects/portfolio/portfolio-4.webp',
      '/img/projects/portfolio/portfolio-5.webp',
      '/img/projects/portfolio/portfolio-6.webp',
    ],
    demo: 'https://portfolio-azure-theta-56.vercel.app/',
    gitHub: 'https://github.com/andriy-kostiuk/portfolio',
    descShort:
      'Personal portfolio website built with Next.js App Router, featuring a fully responsive design, animated UI, and modular architecture using TypeScript and SCSS modules.',
    desc: [
      'Personal portfolio website built with Next.js showcasing professional skills, projects, and experience.',
      'Features a clean, responsive design optimized for performance and SEO.',
      'Includes a contact form with email sending capability via NodeMailer.',
    ],
    features: [
      'Next.js Framework: Server-side rendering and static site generation for SEO and performance.',
      'Responsive Design: Mobile-first layout optimized for phones, tablets, and desktops.',
      'Project Showcase: Detailed examples of skills and completed projects.',
      'Dark/Light Mode: User-selectable theme switching.',
      'Contact Form: Send messages directly from the site via integrated NodeMailer email service.',
      'Performance Optimized: Fast load times and smooth UI transitions.',
    ],
    technologies: [
      'Next.js',
      'React',
      'TypeScript',
      'NodeMailer',
      'Mobile First',
      'Swiper',
      'BEM',
      'Responsive Design',
      'CSS modules (SCSS)',
    ],
    goal: 'Create a professional, SEO-friendly personal portfolio site with an easy-to-use contact form supporting email notifications.',
    solution:
      'Developed with Next.js and React, integrated NodeMailer on backend API routes for secure email sending, implemented responsive design and theme switching to enhance UX.',
  },
  {
    id: 'timeless-met',
    title: 'Timeless MET',
    subtitle: 'Modern Museum Landing Page',
    images: [
      '/img/projects/timeless-met/timeless-met-1.webp',
      '/img/projects/timeless-met/timeless-met-2.webp',
      '/img/projects/timeless-met/timeless-met-3.webp',
      '/img/projects/timeless-met/timeless-met-4.webp',
      '/img/projects/timeless-met/timeless-met-5.webp',
    ],
    demo: 'https://andriy-kostiuk.github.io/timeless_met/',
    gitHub: 'https://github.com/andriy-kostiuk/timeless_met',
    descShort:
      'Responsive and modern landing page for the MET Museum, built with HTML5 and SCSS. Clean, semantic structure and fully adaptive layout.',
    desc: [
      'A responsive and modern landing page for The MET museum, utilizing HTML5, SCSS, and BEM methodology for a clean and maintainable code structure.',
      'Implemented with a focus on responsive design to ensure optimal viewing experience across all devices, from desktop computers to mobile phones.',
    ],
    features: [
      'Responsive Design: Fully adaptive layout for all screen sizes from mobile to desktop.',
      'BEM Methodology: CSS organized according to Block-Element-Modifier principles for improved maintainability.',
      'CSS Animations: Subtle animations enhance user experience without impacting performance.',
      'Smooth Scrolling: Implemented for better navigation experience within the page.',
      'Custom Grid System: Hand-coded CSS grid layouts for flexible content organization.',
      'Burger Menu: Mobile-friendly navigation with animated hamburger menu toggle.',
      'Cross-Browser Compatibility: Tested and optimized for major browsers.',
      'Semantic HTML5: Properly structured markup to improve accessibility and SEO.',
    ],
    technologies: ['HTML5', 'SCSS', 'BEM methodology', 'Mobile-first'],
    goal: 'Creating a responsive website that captures the elegant aesthetic of The MET museum while ensuring excellent performance on all devices.',
    solution:
      'Implemented BEM methodology for maintainable SCSS module architecture and leveraged modern CSS techniques like Grid and Flexbox to create a responsive layout without relying heavily on JavaScript.',
  },
  {
    id: 'power-tiles',
    title: 'PowerTiles',
    subtitle: '2048 Game',
    images: [
      '/img/projects/power-tiles/power-tiles-1.webp',
      '/img/projects/power-tiles/power-tiles-2.webp',
      '/img/projects/power-tiles/power-tiles-3.webp',
      '/img/projects/power-tiles/power-tiles-4.webp',
      '/img/projects/power-tiles/power-tiles-5.webp',
    ],
    demo: 'https://andriy-kostiuk.github.io/power-tiles/',
    gitHub: 'https://github.com/andriy-kostiuk/power-tiles',
    descShort:
      'Classic 2048 puzzle game built with JavaScript, HTML and SCSS. Supports tile movement, merging, scoring, and smooth animations.',
    desc: [
      'PowerTiles is a browser-based implementation of the 2048 puzzle game, where players slide numbered tiles on a grid to combine them and reach the 2048 tile.',
      'Built using vanilla JavaScript, HTML5, and CSS/SCSS to ensure smooth gameplay and responsive layout without external libraries.',
      'The game supports tile merging, score tracking, and restart functionality, along with intuitive keyboard controls.',
    ],
    features: [
      'Tile Movement: Supports sliding tiles in four directions — up, down, left, and right.',
      'Merging Logic: Identical tiles combine into one, increasing the player’s score.',
      'New Tile Generation: Automatically adds new tiles in random empty cells after each move.',
      'Game Restart: Provides a restart button to reset the game state.',
      'Score Display: Tracks and displays the current score and best score.',
      'Responsive Design: Optimized for both desktop and mobile play.',
      'Keyboard Controls: Arrow keys used for intuitive and fast gameplay.',
    ],
    technologies: [
      'HTML5',
      'SCSS',
      'Vanilla JavaScript',
      'Responsive Design',
      'ES6+ Syntax',
    ],
    goal: 'Recreate the popular 2048 puzzle game in a clean and responsive format using only native web technologies.',
    solution:
      'Used modular ES6 JavaScript with strict mode and class-based architecture to manage game logic. Implemented score tracking, merging logic, and responsive design without external dependencies.',
  },

  {
    id: 'task-flow',
    title: 'TaskFlow',
    subtitle: 'Redux-Powered Todo Application',
    images: [
      '/img/projects/task-flow/task-flow-1.webp',
      '/img/projects/task-flow/task-flow-2.webp',
      '/img/projects/task-flow/task-flow-3.webp',
      '/img/projects/task-flow/task-flow-4.webp',
      '/img/projects/task-flow/task-flow-5.webp',
    ],
    demo: 'https://andriy-kostiuk.github.io/task-flow/',
    gitHub: 'https://github.com/andriy-kostiuk/task-flow',
    descShort:
      'ToDo application built with React and TypeScript. Uses Redux Toolkit for state management and provides filtering, editing and task grouping.',
    desc: [
      'A React & TypeScript project built using Redux Toolkit to manage a simple Todo application with clean code practices and structured state management.',
      'The app demonstrates modern React development patterns with a focus on reusable components, type safety, and efficient state management.',
      'Features server-side integration for persistent data operations and comprehensive error handling for a robust user experience.',
    ],
    features: [
      'CRUD Operations: Add, update, and delete todos with a responsive and dynamic UI.',
      'Task Filtering: View all, active, or completed tasks with smooth filtering transitions.',
      'Bulk Actions: Mark all tasks as completed with a single action for efficiency.',
      'Persistent State: Integrated server-side operations for task creation, updates, and deletion.',
      'Error Handling: User-friendly notifications for server errors during CRUD operations.',
      'Keyboard Shortcuts: Quick interactions using Enter to save or Escape to cancel editing.',
      'Smooth Animations: CSSTransitionGroup implementation for adding/removing todos.',
      'Type Safety: Full TypeScript integration for better code maintainability.',
    ],
    technologies: [
      'React',
      'TypeScript',
      'Redux Toolkit',
      'SCSS Modules',
      'Modern JavaScript (ES6+)',
    ],
    goal: 'Build a feature-complete Todo application that demonstrates modern React development practices, efficient state management with Redux Toolkit, and clean, maintainable code architecture.',
    solution:
      'Implemented Redux Toolkit for simplified state management, utilized TypeScript for type safety, and created reusable components with isolated logic. Applied SCSS modules for modular styling and integrated smooth animations for enhanced user experience.',
  },
  {
    id: 'tech-shop',
    title: 'TechShop',
    subtitle: 'Fully Functional E-commerce Application',
    images: [
      '/img/projects/tech-shop/tech-shop-1.webp',
      '/img/projects/tech-shop/tech-shop-2.webp',
      '/img/projects/tech-shop/tech-shop-3.webp',
      '/img/projects/tech-shop/tech-shop-4.webp',
      '/img/projects/tech-shop/tech-shop-5.webp',
      '/img/projects/tech-shop/tech-shop-6.webp',
      '/img/projects/tech-shop/tech-shop-7.webp',
      '/img/projects/tech-shop/tech-shop-8.webp',
    ],
    demo: 'https://andriy-kostiuk.github.io/tech-shop/',
    gitHub: 'https://github.com/andriy-kostiuk/tech-shop',
    descShort:
      'E-commerce app built with React, TypeScript, Redux Toolkit and localStorage. Includes product catalog, cart, favorites and responsive design.',
    desc: [
      'TechShop is a fully functional e-commerce application built with React and TypeScript, offering users a smooth shopping experience with a responsive interface.',
      'The project demonstrates modern frontend architecture using reusable components, hooks, and modular SCSS styling, following best practices for maintainability and code quality.',
      'It includes product browsing, search, sorting, cart functionality, favorites, and a customizable theme switcher, making it a comprehensive showcase of e-commerce capabilities.',
    ],
    features: [
      'Product Catalog: Browse products by category (Phones, Tablets, Accessories) with dynamic rendering.',
      'Product Details Page: Detailed view with specifications, available colors and capacities, and related products.',
      'Shopping Cart: Add, remove, and update product quantities with persistent localStorage state.',
      'Favorites: Mark products as favorites and manage them on a separate page.',
      'Search Functionality: Filter products by name, with query persistence in the URL.',
      'Sorting & Pagination: Sort products by Newest, Alphabetically, or Cheapest with pagination support.',
      'Responsive Layout: Fully responsive UI built with Flexbox, Grid, and media queries.',
      'Sticky Header: Includes navigation, logo, cart, favorites.',
      'Color Theme Switching: Toggle between different UI themes for personalized appearance.',
      '404 Page: Graceful fallback with navigation option for unknown routes.',
    ],
    technologies: [
      'React',
      'TypeScript',
      'CSS Modules (SCSS)',
      'React Hooks',
      'LocalStorage',
      'Responsive Design',
    ],
    goal: 'Create a professional-grade, responsive e-commerce platform that covers essential shopping functionality and demonstrates a strong grasp of React, TypeScript, and frontend architecture.',
    solution:
      'Built a modular e-commerce application using React and TypeScript, leveraging reusable components, React Context, and custom hooks. Integrated features like filtering, sorting, cart/favorites persistence via localStorage, and a responsive layout with scoped SCSS modules.',
  },
  {
    id: 'hello-weather',
    title: 'Hello Weather',
    subtitle: 'React Weather App with Theme Switching',
    images: [
      '/img/projects/hello-weather/hello-weather-1.webp',
      '/img/projects/hello-weather/hello-weather-2.webp',
      '/img/projects/hello-weather/hello-weather-3.webp',
      '/img/projects/hello-weather/hello-weather-4.webp',
      '/img/projects/hello-weather/hello-weather-5.webp',
      '/img/projects/hello-weather/hello-weather-6.webp',
    ],
    demo: 'https://hello-weather-a-kostiuk.vercel.app/',
    gitHub: 'https://github.com/andriy-kostiuk/hello-weather',
    descShort:
      'It is a sleek weather application built with React that provides real-time weather information and forecasts using the OpenWeather API.',
    desc: [
      'Hello Weather is a weather application built with React and TypeScript, featuring a clean architecture and responsive design.',
      'The app provides real-time weather information for Ukrainian cities, using the OpenWeather API.',
      'It supports light and dark themes and is optimized for all device types using Styled Components.',
    ],
    features: [
      'Ukrainian Cities: Search and view weather data for cities in Ukraine.',
      'Current Weather Data: Includes temperature, humidity, wind speed, and pressure.',
      'Light/Dark Theme: Toggle between light and dark UI themes.',
      'Responsive Layout: Adaptive design for desktops, tablets, and mobile devices.',
      'Type Safety: Fully written in TypeScript for better reliability and maintainability.',
      'API Integration: Retrieves real-time weather data from the OpenWeather API.',
    ],
    technologies: [
      'React',
      'TypeScript',
      'Styled Components',
      'OpenWeather API',
      'Responsive Design',
      'Mobile First',
      'BEM',
    ],
    goal: 'Build a lightweight weather app for Ukrainian users with modern technologies, responsive layout, and customizable themes.',
    solution:
      'Developed a React + TypeScript application with Styled Components. Integrated OpenWeather API to provide real-time weather data and implemented theme switching with a fully responsive layout.',
  },
  {
    id: 'book-finder',
    title: 'BookFinder',
    subtitle: 'App for Book Search with Google Books API',
    images: [
      '/img/projects/book-finder/book-finder-1.webp',
      '/img/projects/book-finder/book-finder-2.webp',
      '/img/projects/book-finder/book-finder-3.webp',
      '/img/projects/book-finder/book-finder-4.webp',
      '/img/projects/book-finder/book-finder-5.webp',
    ],
    demo: 'https://book-finder-lime.vercel.app/',
    gitHub: 'https://github.com/andriy-kostiuk/book-finder',
    descShort:
      'It is a Next.js application that enables users to search and explore books through the Google Books API. The project features a responsive design with detailed book information display, showcasing advanced frontend development skills and efficient API integration.',
    desc: [
      'Book Finder is a modern book search application built with Next.js and TypeScript.',
      'It allows users to search the Google Books database and view detailed information about books.',
      'The app features server-side rendering for performance and SEO benefits, and a responsive, clean UI for all devices.',
    ],
    features: [
      'Fast Book Search: Search the Google Books API with instant results.',
      'Book Details: View title, author, publication date, description, and more.',
      'Responsive Design: Works seamlessly on desktops, tablets, and smartphones.',
      'Server-Side Rendering: Uses Next.js SSR for faster loading and SEO optimization.',
      'Modern UI: Clean layout focused on usability and accessibility.',
    ],
    technologies: [
      'Next.js',
      'React',
      'TypeScript',
      'Google Books API',
      'Styled Components',
      'Responsive Design',
      'BEM',
    ],
    goal: 'Create a responsive and SEO-optimized book search application using modern frontend tools and external API integration.',
    solution:
      'Built with Next.js and TypeScript, the application integrates the Google Books API to deliver fast, detailed book search results with a clean user interface and full responsiveness.',
  },
];
